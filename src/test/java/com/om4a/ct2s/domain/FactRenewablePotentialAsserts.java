package com.om4a.ct2s.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FactRenewablePotentialAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactRenewablePotentialAllPropertiesEquals(FactRenewablePotential expected, FactRenewablePotential actual) {
        assertFactRenewablePotentialAutoGeneratedPropertiesEquals(expected, actual);
        assertFactRenewablePotentialAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactRenewablePotentialAllUpdatablePropertiesEquals(
        FactRenewablePotential expected,
        FactRenewablePotential actual
    ) {
        assertFactRenewablePotentialUpdatableFieldsEquals(expected, actual);
        assertFactRenewablePotentialUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactRenewablePotentialAutoGeneratedPropertiesEquals(
        FactRenewablePotential expected,
        FactRenewablePotential actual
    ) {
        assertThat(actual)
            .as("Verify FactRenewablePotential auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactRenewablePotentialUpdatableFieldsEquals(FactRenewablePotential expected, FactRenewablePotential actual) {
        assertThat(actual)
            .as("Verify FactRenewablePotential relevant properties")
            .satisfies(a -> assertThat(a.getMaxCapacity()).as("check maxCapacity").isEqualTo(expected.getMaxCapacity()))
            .satisfies(a -> assertThat(a.getAvailableCapacity()).as("check availableCapacity").isEqualTo(expected.getAvailableCapacity()))
            .satisfies(a -> assertThat(a.getMinCapacity()).as("check minCapacity").isEqualTo(expected.getMinCapacity()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactRenewablePotentialUpdatableRelationshipsEquals(
        FactRenewablePotential expected,
        FactRenewablePotential actual
    ) {
        assertThat(actual)
            .as("Verify FactRenewablePotential relationships")
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()))
            .satisfies(a -> assertThat(a.getYear()).as("check year").isEqualTo(expected.getYear()))
            .satisfies(a -> assertThat(a.getTechnology()).as("check technology").isEqualTo(expected.getTechnology()))
            .satisfies(a -> assertThat(a.getMetadata()).as("check metadata").isEqualTo(expected.getMetadata()));
    }
}
