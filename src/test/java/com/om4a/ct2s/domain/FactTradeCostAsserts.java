package com.om4a.ct2s.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FactTradeCostAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactTradeCostAllPropertiesEquals(FactTradeCost expected, FactTradeCost actual) {
        assertFactTradeCostAutoGeneratedPropertiesEquals(expected, actual);
        assertFactTradeCostAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactTradeCostAllUpdatablePropertiesEquals(FactTradeCost expected, FactTradeCost actual) {
        assertFactTradeCostUpdatableFieldsEquals(expected, actual);
        assertFactTradeCostUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactTradeCostAutoGeneratedPropertiesEquals(FactTradeCost expected, FactTradeCost actual) {
        assertThat(actual)
            .as("Verify FactTradeCost auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactTradeCostUpdatableFieldsEquals(FactTradeCost expected, FactTradeCost actual) {
        assertThat(actual)
            .as("Verify FactTradeCost relevant properties")
            .satisfies(a -> assertThat(a.getFixedCost()).as("check fixedCost").isEqualTo(expected.getFixedCost()))
            .satisfies(a -> assertThat(a.getVariableCost()).as("check variableCost").isEqualTo(expected.getVariableCost()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactTradeCostUpdatableRelationshipsEquals(FactTradeCost expected, FactTradeCost actual) {
        assertThat(actual)
            .as("Verify FactTradeCost relationships")
            .satisfies(a -> assertThat(a.getFuel()).as("check fuel").isEqualTo(expected.getFuel()))
            .satisfies(a -> assertThat(a.getMetadata()).as("check metadata").isEqualTo(expected.getMetadata()));
    }
}
